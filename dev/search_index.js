var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = OncoDiversity","category":"page"},{"location":"#OncoDiversity","page":"Home","title":"OncoDiversity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [OncoDiversity]","category":"page"},{"location":"#OncoDiversity.CDR3SeqData","page":"Home","title":"OncoDiversity.CDR3SeqData","text":"CDR3SeqData{T,U}\n\nstore two data tables that make up a CDR3 Dataset, the per (patient, sequence) count and the physiochemisty data for each sequence. These tables can be joined together usind DataFrame(ds::CDR3SeqData).\n\n\n\n\n\n","category":"type"},{"location":"#OncoDiversity.DiversityScores","page":"Home","title":"OncoDiversity.DiversityScores","text":"DiversityScores{T}\n\nStores a dataframe of diversity scores along with the range of qs that it was computed over.\n\n\n\n\n\n","category":"type"},{"location":"#OncoDiversity.DiversityScores-2","page":"Home","title":"OncoDiversity.DiversityScores","text":"DiversityScores(countDF::DataFrame, rangeQ::AbstractVector, samplecol=:patient)\n\nComputes point estimates of diversity from a countframe DataFrame, range of q values, and optional sample column identifier. \n\nPoint estimates of diversity of interest: \n\nlow q diversity (q=0.01)\nhigh q diversity (q=100)\ndelta qD diversity = low q diversity - high q diversity\ninflection point q\nmagnitude of slope at the inflection point\ndiversity qD evaluated at q=inflection point q\nShannon diversity (log qD at q=1)\nSimpson diversity (1/qD at q=2)\n\nInput: DataFrame of counts, vector of q values, optional sample column symbol (defaults to :patient) Output: DiversityScores struct\n\n\n\n\n\n","category":"type"},{"location":"#OncoDiversity.calcIPdiversity-Tuple{DataFrames.DataFrame,Array}","page":"Home","title":"OncoDiversity.calcIPdiversity","text":"calcIPdiversity(df::DataFrame, qrange::Array)\n\nComputes diversity over a range of q values (qrange) and an input DataFrame of frequencies across types, then numerically determines the inflection point and the magnitude of the slope at that point, and returns a DataFrame with a column for patient name, a column for q at which the inflection point occurs, and a column for the magnitude of the slope at the inflection point. \n\nInput: DataFrame and array of q values Output: DataFrame of inflection point q and slope diversity per patient\n\n\n\n\n\n","category":"method"},{"location":"#OncoDiversity.calcOverQ-Tuple{DataFrames.DataFrame,Array{Float64,N} where N}","page":"Home","title":"OncoDiversity.calcOverQ","text":"calcOverQ(origDF::DataFrame,rangeQ::Array{Float64})\n\nComputes the diversity score over a range of q values. Returns a DataFrame where each column is a different q value and each row is a different patient. \n\nInput: DataFrame of frequencies per patient and range of q  Output: DataFrame of diversity scores across the range of q per patient \n\n\n\n\n\n","category":"method"},{"location":"#OncoDiversity.countframe-Tuple{CDR3SeqAnalysis,DataFrames.DataFrame}","page":"Home","title":"OncoDiversity.countframe","text":"countframe(a::CDR3SeqAnalysis, typeDF::DataFrame)\n\nCounts the number of occurances of CDR3 by patients, after checking that patient and CDR3 columns are present in the DataFrame, and returns as a DataFrame of the counts. \n\nInput: CDR3SeqAnalysis struct and DataFrame of CDR3 recoveries Output: DataFrame\n\n\n\n\n\n","category":"method"},{"location":"#OncoDiversity.countframefull-Tuple{CDR3SeqAnalysis,DataFrames.DataFrame}","page":"Home","title":"OncoDiversity.countframefull","text":"countframefull(a::CDR3SeqAnalysis, df::DataFrame)\n\nMerges df, a DataFrame of counts, with all the physiochemical information associated with the CDR3 sequences. \n\nInput: CDR3SeqAnalysis struc and DataFrame Output: DataFrame \n\n\n\n\n\n","category":"method"},{"location":"#OncoDiversity.diversity-Tuple{Any,Any}","page":"Home","title":"OncoDiversity.diversity","text":"diversity(seq, q)\n\nComputes the generalized diversity index for a given value of q and the associated frequencies of the dataset. \n\n  ^qD = left( sum_i^n (p_i^q) right)^1(1-q)\n\nwhere p_i are the frequency across types and q is the order of diversity and you are summing over all types present in the dataset.\n\n\n\n\n\n","category":"method"},{"location":"#OncoDiversity.filteredDataset-Tuple{Type{CDR3SeqData},DataFrames.DataFrame,Array{String,1}}","page":"Home","title":"OncoDiversity.filteredDataset","text":"filteredDataset(::Type{CDR3SeqData}, df::DataFrame, receptorname::Vector{String})\n\nSubsets the dataset based on receptor types of interest, allowing users to subset based on combintations of types. \n\nInput: CDR3SeqData type, a DataFrame of counts, and a string that matches the types of the dataset Output: DataFrame\n\nExample: df_filtered = filteredDataset(CDR3SeqData, df, [\"TRA\",\"TRB\"])\n\n\n\n\n\n","category":"method"},{"location":"#OncoDiversity.filteredDataset-Tuple{Type{CDR3SeqData},DataFrames.DataFrame,String}","page":"Home","title":"OncoDiversity.filteredDataset","text":"filteredDataset(::Type{CDR3SeqData}, df::DataFrame, receptorname::String)\n\nSubsets the dataset based on a receptor type of interest\n\nInput: CDR3SeqData type, a DataFrame of counts, and a string that matches the types of the dataset Output: DataFrame\n\nExample: df_filtered = filteredDataset(CDR3SeqData, df, \"TRA\")\n\n\n\n\n\n","category":"method"},{"location":"#OncoDiversity.findInflection-Tuple{Array,Array}","page":"Home","title":"OncoDiversity.findInflection","text":"findInflection(q::Array, qD::Array)\n\nComputes the inflection point of a sequence numerically.\n\n\n\n\n\n","category":"method"},{"location":"#OncoDiversity.patientdiversity-Tuple{DataFrames.DataFrame,Real}","page":"Home","title":"OncoDiversity.patientdiversity","text":"patientdiversity(countframe::DataFrame,q::Real)\n\nComputes a DataFrame of diversity scores across patients from a countframe DataFrame and a single value of q. \n\nInput: DataFrame and a real number Output: DataFrame \n\n\n\n\n\n","category":"method"},{"location":"#OncoDiversity.reportInflection-Tuple{Array,Array}","page":"Home","title":"OncoDiversity.reportInflection","text":"reportInflection(q::Array, qD::Array)\n\nComputes the inflection point and the magnitude of the slope at that point using findInflection and findInflectionLocal functions.\n\n\n\n\n\n","category":"method"},{"location":"#OncoDiversity.requirecol-Tuple{DataFrames.DataFrame,AbstractString}","page":"Home","title":"OncoDiversity.requirecol","text":"requirecol(df::DataFrame, colname::AbstractString)\n\nRaises an assertion error if colname is not a column of DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"#OncoDiversity.summarize-Tuple{CDR3SeqData}","page":"Home","title":"OncoDiversity.summarize","text":"summarize(df::CDR3SeqData)\n\nComputes a summary of the CDR3 sequences recovered in the dataset per patient including the total number of recoveries, minimum number on recoveries per sequence, maximum number of recoveries per sequence, average number of recoveries per sequence, median number of recoveries per sequence, and number of unique CDR3 recoveries.\n\nInput: CDR3SeqData struct Output: DataFrame\n\n\n\n\n\n","category":"method"}]
}
